{"version":3,"sources":["Movie.jsx","movie.png","roll.png","App.js","reportWebVitals.js","index.js"],"names":["Movie","props","count","stars","Math","ceil","rating","floor","push","src","className","poster","alt","moviename","plot","year","director","actors","genre","languages","awards","production","runtime","App","apiCall","a","fetch","then","res","json","response","Response","alert","Error","console","log","setState","movie","Title","Year","imdbRating","Plot","Poster","Genre","Director","loaded","Actors","Awards","Production","Runtime","Language","rated","Rated","movieName","state","hasSearched","errormsg","width","roll","type","name","onChange","e","target","value","onClick","class","align","rel","this","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20151d3e.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function Movie(props){\n    var count = 0;\n    var stars = [];\n    while (count < Math.ceil(props.rating)){\n        count+=1;\n        if((count <= Math.floor(props.rating))){stars.push(<span>⭐</span>);}\n        else{stars.push(<img src=\"https://img.icons8.com/color/48/000000/star-half.png\"/>)}\n    }\n    return(\n        <div className=\"moviecard\">\n            <img className=\"posterimg\" src={props.poster} alt=\"poster\" />\n            <h2>{props.moviename}</h2>\n            <h4>{props.plot}</h4>\n            \n            <h4>Released in:{props.year}</h4>\n            <h5>Director:{props.director}</h5>\n        \n            <h5>Actors:{props.actors} etc.</h5>\n            <h5>Genre:{props.genre}</h5>\n            <h5>Rated : {stars}  {props.rating}</h5>\n            <h5>Languages : {props.languages}</h5>\n            <h5>Awards: {props.awards}</h5>\n            <h5>Production: {props.production}</h5>\n            <h5>Runtime : {props.runtime}</h5>\n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/movie.fbad564e.png\";","export default __webpack_public_path__ + \"static/media/roll.7489fcad.png\";","\nimport Movie from \"./Movie\"\nimport React from \"react\"\nimport './App.css';\nimport movie from './movie.png'\nimport roll from \"./roll.png\"\n\nexport default class App extends React.Component {\n  constructor(){\n    super()\n    this.state={\n      //attributes: {\n        hasSearched:false,\n        movieName:\"\",\n        movie:\"\",\n        year:\"\",\n        rating:\"\",\n        plot:\"\",\n        director:\"\",\n        poster:\"\",\n        genre:\"\",\n        errormsg:\"\",\n        loaded:false,\n        actors:\"\",\n        rated:\"\",\n        languages:\"\",\n        runtime:\"\",\n        production:\"\",\n        awards:\"\"\n      //}\n    }\n  }\n  \n\napiCall= async (moviename)=>{\n \n  await fetch(\"https://www.omdbapi.com/?apikey=51b33037&t=\"+moviename).then(res=>res.json()).then((response)=>{\n    if(response.Response===\"False\"){\n      alert(response.Error)\n\n    }\n    else{\n      console.log(response)\n      this.setState({movie:response.Title})\n      this.setState({year:response.Year})\n      this.setState({rating:response.imdbRating})\n      this.setState({plot:response.Plot})\n      this.setState({poster:response.Poster})\n      this.setState({genre:response.Genre})\n      this.setState({director:response.Director})\n      this.setState({loaded:true})\n      this.setState({actors:response.Actors})\n      this.setState({awards:response.Awards})\n      this.setState({production:response.Production})\n      this.setState({runtime:response.Runtime})\n      this.setState({languages:response.Language})\n      this.setState({rated:response.Rated})\n      alert(\"Movie Details loaded. Please scroll down if not visible\")\n    }\n   \n  })\n  this.setState({movieName:\" \"})\n}\n  render(){  \n      return (\n            <div className=\"App\">\n              <header className=\"App-header\">\n                <h1 className=\"imdb\" > IMDB Movie App</h1>\n                <img className=\"movieimage\"src={movie} alt=\"movielogo\"/>\n                <img width=\"20%\"className=\"movieimage\" src={roll} alt=\"rolllogo\"/>\n\n            <center><h2>Search for any movie and get its details!</h2></center>\n            <br></br>\n            <input  className=\"input100\" type=\"text\" name=\"username\" onChange={(e)=>{this.setState({movieName:e.target.value})}}/>\n            <br></br>\n            <div \n              onClick={()=>{this.apiCall(this.state.movieName)}} \n              class=\"button_cont\" align=\"center\">\n                <a class=\"example_a\"  rel=\"nofollow noopener\">Search Movie</a>\n            </div>\n            {\n              this.state.loaded &&\n                <Movie \n                  poster={this.state.poster} \n                  actors={this.state.actors}  \n                  awards={this.state.awards} \n                  languages={this.state.languages} \n                  runtime={this.state.runtime}   \n                  production={this.state.production} \n                  moviename={this.state.movie} \n                  plot={this.state.plot} \n                  year={this.state.year} \n                  actors={this.state.actors} \n                  director={this.state.director} \n                  genre={this.state.genre} \n                  rating={this.state.rating}/>\n            }\n          <h4>© Souritra Kar 2020</h4>\n          <h5> Uses: OMDB API and React.JS Framework</h5>\n          </header>\n        </div>\n        );\n    } //RENDER\n} //CLASS\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}